---
description: 
globs: 
alwaysApply: true
---
# Coding pattern preferences

- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that already have similar code and functionality
- Write code that takes into account the different environments: dev, test and prod
- You are careful to only make changes that are requested or you are confident about. You are also confident to make the changes only to the code that is well understood and related to the change being requested
- Do NOT modify code or UI elements that already work, unless explicitly instructed
- When fixing an issue or a bug, do not introduce a new pattern or technology without first exausting all options for the existing implementation. And if you finaly do this, make sure to remove the old implementation afterwards, so we don't have duplicate logic.
- Keep the codebase very clean and organised
– Avoid writing scripts in files if possible, especially if the script is likely only to be run once
– Avoid having files over 200–300 lines of code. Refactor at that point.
– Mocking data is only needed for tests, never mock data for dev or prod
– Never add stubbing or fake data patterns to code that affects the dev or prod environments
– Never overwrite my .env file without first asking and confirming
- Write comprehensive tests for all new or modified functionality

# Coding workflow preferences

- Focus on the areas of the code relevant to the task
- Do not touch the code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and of how a feature works, after it has shown to work well, unless explicitly instructed
- Always think bout what other methods and areas of code might be affected by code changes

# AI General Guidelines

- Follow the user’s requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, placeholders or missing pieces.
- Never unintentionally delete data or code; confirm explicitly before destructive actions.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise; minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.
- Use early returns whenever possible to make the code more readable.
- Use “class:” instead of the tertiary operator in class tags whenever possible.
- Use descriptive variable and function/const names. Also, event functions should be named with a “handle” prefix, like “handleClick” for onClick and “handleKeyDown” for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex=“0”, aria-label, on:click, and on:keydown, and similar attributes.
- Use consts instead of functions, for example, “const toggle = () =>”. Also, define a type if possible.
- Use .md files in /docs directory and base all your decisions on instructions that are in these files.

# TypeScript General Guidelines

## Basic Principles:

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
- Avoid using any.
- Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.

## Nomenclature:

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
- Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
    - Except for standard abbreviations like API, URL, etc.
    - Except for well-known abbreviations:
        - i, j for loops
        - err for errors
        - ctx for contexts
        - req, res, next for middleware function parameters.

## Functions:

- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
    - If it returns a boolean, use isX or hasX, canX, etc.
    - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
    - Early checks and returns.
    - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
- Use arrow functions for simple functions (less than 3 instructions).
- Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO:
    - Use an object to pass multiple parameters.
    - Use an object to return results.
- Declare necessary types for input arguments and output.
- Use a single level of abstraction.

## Data:

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
- Use readonly for data that doesn't change.
- Use as const for literals that don't change.

## Classes:

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
    - Less than 200 instructions.
    - Less than 10 public methods.
    - Less than 10 properties.

## Exceptions:

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
    - Fix an expected problem.
    - Add context.
- Otherwise, use a global handler.

## Testing:

- Follow the Arrange-Act-Assert convention for tests.
- Name test variables clearly.
- Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function.
- Use test doubles to simulate dependencies.
    - Except for third-party dependencies that are not expensive to execute.
- Write acceptance tests for each module.
- Follow the Given-When-Then convention.